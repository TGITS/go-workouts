package main

import (
	"reflect"
	"testing"
)

type palindrometestpair struct {
	input  string
	output bool
}

func TestIsPalindrome(t *testing.T) {

	var tests = []palindrometestpair{
		{"madam", true},
		{"été", true},
		{"ClearlyNotAPalindrome", false},
		{"Palindrome", false},
		{"a", true},
		{"aa", true},
		{"abb", false},
		{"aba", true},
		{"1111111111", true},
		{"1111111112", false},
	}

	for _, s := range tests {

		if isPalindrome(s.input) != s.output {
			t.Error("Not the expected result for : ", s)
		}
	}
}

type allpalindrometestpair struct {
	input  string
	output []string
}

func TestFindPalindromes(t *testing.T) {

	var tests = []allpalindrometestpair{
		{"madam", []string{"madam", "ada"}},
		{"ete", []string{"ete"}},
		{"1111", []string{"1111", "111", "11", "111", "11", "11"}},
		{"1112", []string{"111", "11", "11"}},
	}

	for _, s := range tests {
		answers := findPalindromes(s.input)
		// fmt.Fprintf(os.Stderr, "original string : %s\n", s.input)
		// fmt.Fprintf(os.Stderr, "expected results : %s\n", s.output)
		// fmt.Fprintf(os.Stderr, "results : %v\n", answers)
		if !reflect.DeepEqual(s.output, answers) {
			t.Error("Not all the palindromes were found : ", answers)
		}
	}
}

func TestFindLongestPalindromes(t *testing.T) {

	var tests = []allpalindrometestpair{
		{"madam", []string{"madam"}},
		{"ete", []string{"ete"}},
		{"1111", []string{"1111"}},
		{"111222", []string{"111", "222"}},
		{"111222333111222333111222333111222333", []string{"111", "222", "333", "111", "222", "333", "111", "222", "333", "111", "222", "333"}},
	}

	for _, s := range tests {
		answers := findLongest(findPalindromes(s.input))
		// fmt.Fprintf(os.Stderr, "original string : %s\n", s.input)
		// fmt.Fprintf(os.Stderr, "expected results : %s\n", s.output)
		// fmt.Fprintf(os.Stderr, "results : %v\n", answers)
		if !reflect.DeepEqual(s.output, answers) {
			t.Error("Not the correct longest palindromes were found : ", answers)
		}
	}
}

func TestFindLongestPalindromesOptimized(t *testing.T) {

	var tests = []allpalindrometestpair{
		{"madam", []string{"madam"}},
		{"ete", []string{"ete"}},
		{"1111", []string{"1111"}},
		{"111222", []string{"111", "222"}},
		{"111222333111222333111222333111222333", []string{"111", "222", "333", "111", "222", "333", "111", "222", "333", "111", "222", "333"}},
		{"123zabaz554", []string{"zabaz"}},
		{"aeiouyuoieaCODINGAME12345654321pz", []string{"aeiouyuoiea", "12345654321"}},
		{"CGTCATTCATGCGGAAGGGGTAAGACCATTAGAAGTAGGGATAGTCCCGAACCTCACTTACCACTCCCAATAAGGGATCCCTGTCTGAAGGATGAGTGTCAGCCAGTGTAACCCGATGAGGTACCCAGAAGCCGAACTGGGCCAGACAACCCGGCGCTAACGCACTCAAAGCCGGGACGCGACGCGACATATCGGCTAAGAGTAGGCCGGGAGTGTAGACCTTTGGGGTTGAATAAATCTGTCGTAGTAACCGGCT",
			[]string{"AAGCCGAA", "ATCGGCTA", "TTGGGGTT"}},
		{"3141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420198938095257",
			[]string{"1736371"}},
		{"luTaL29Jl9fHLgKGMC50815n5RUb2akIXCCdO15QrmaInCV6gbeKqFVxVQp3s1paZUu9ERvViADltqSXPxeWvMznsm7V6D5I8we30uuwnvFQRy1aVyHFnVNizeCndxzjEeARu5MvKsXX8Au1jDkbfpGlxl00kTLG3uVwe6R2HenVDw5TQnZnO7rI2hmGKuhtY2FU8vXg4bV6wOmRn3Gb2awhJoacFmFUTdic1KeEdQjTWtAV2l3mOWyFk58TIowQzTTB1iAba6tmj01L41zBF6kooj4RBSVvjWmodzgmlyAnQQEn0MHBhcnWi0IUCnj83WWHTnCDzLcmoaEwusg4FNiDh9ueTRSsskLWnDkcKDcNf391mLQg3GU9kjosKNkTj3dfgLpfxvruUx9Dc60bodPpWAFg5ZLd1FrAeBDVK10OfKT5JIUuMoOV4jPGq4KXMZRU0i2JFiJZsWudLOmzziF8QKjZtr2EErjkWPp4H7FMaiy9ZzYsGCpNTp7MdoWnjsi4mrlJxM4uGayOc8ZpQf733rjrtgRGksJJaFYmPNLeoMMiAsjTZVZIYLv5Ymo3cisQAsVSpyWbiCY5oPcbBa0Con3zFmsHeMfjB9yKwHVzmyIQOpUYv8r0KFj61X95i6TGxsWKYfJ7FK0NLvH8ig1ymgsvSLDEmT7A5TXQztyZwvCoW0mYciQdBpDzejCDfPrHtUmIaYcIxKfurQWnsOl4bwYxoRbHeby9PPonTh7J8OYJuTUObuqel6cmKuDl2GWwvbFx4fuAsTYdVf9FaBzLFAuLg0gu9qquyBc3JnEJTQA7fVLobtvcAFHuE1vYoWQyx9CmYsyei7wIBCSaREYieLj9friOUNkQuv2t1LYnoFtWWpYSG1vsgW2QNnEMP8Q5kRBPvxyNz8hcu1ualuLinvFSCYXAaCmd9TRH3buosVIvvQLG9meuPHlijN5tF8i5ed2meUCpZ2WWlzOHEf2J9D3jLIR86jnENnO08zd34aFP5",
			[]string{"5n5", "VxV", "lxl", "nZn", "FmF", "rjr", "ZVZ", "g0g", "u1u"}},
		{"GHKSLYLSUQJJBSUQCCVQZUKMFAYMDRBVLNMYLRQLESJEVHGVOREMMVEIAWEHVAVSWXIHPLLCWUZQWLHMJSODJYYUKHUMRSMZVWGUOIYHSEJLXXWEQODJEBSSXIEJEXCGJWDANUYROALIHQTWXNABLAAKWAUWLIABOYOMYEMVUYRCBHYXPKSZHZGNYZVVGPVFSPZAVQXPGWYVISDZWECEQQKXQQKRYLSZJEOPKXPLXJVOPFPUNVATJSWFYJKBRQEVLVVFZCMQSRKJZLPPBRCXPOFCCBXAAWKPIXIMAFJBVHOXZFIWORYBXDOHYQKBFBIBURYLCAETHSQMFSIGDSPOGZVYCOQIVDPXEXBMPRXIKVZTZRRAVRUETVIKXLYKLIBETDUHKXAQJAHLSKRHDUFCUSEJBXFOCXBOEXPISYDHGCAOOVETDKIICMKDBAFNRAPJKTKDXLZEZWQMKCLNSANZXSEWFRGCKJRHZYRLVSYIRMORXPVKVBIQPARWMYXXMXNQLLVHADSZJTLCBPQQXIKDUVDBRKYMRKNJJCSBBXSBPGKSDAEDZSMDZJIMNAGLUVPQEWEAXIQTMMEOGHPPYXQDRCQKQKXPMHHCZEFRQQNMOOWKSHMPXGOCNHETUHLSFPGCRBHZXJXCMYJADJSKGPCJGOSLAJVNJNPKZMGDEAEMKBQNNZJCTUHLKOKMDIBTPNIGQZXNXPEXDTVQFHECEBRWUCKJFOCGVPQOMTPFGFQMNEVRGWKELTZMILZTXVWOEYVZWERDFBIFQTMJNIBNQDZHHENIWOJCRGMZWVIFXFFOWZZZLRIUAGOUMSGSJLALYPEHBXQENGWJIFORKVNFXMONJRBWGDEHALHAKHCVREXDUEUMSDFSNAJYAMUPYMPNFVNKHVQTLXOUMJHWIFQFCRYAFCVCCGAWHTOYWXYTJAROWJEZBYQCRESYDFFKSDTBPJOTZWZQPHWELIFUTJGNLEBESVBAXLQBKIDVRYZWCTTSJZYQUBYTY",
			[]string{"SLYLS"}},
	}

	for _, s := range tests {
		answers := findLongestPalindromes(s.input)
		// fmt.Fprintf(os.Stderr, "original string : %s\n", s.input)
		// fmt.Fprintf(os.Stderr, "expected results : %s\n", s.output)
		// fmt.Fprintf(os.Stderr, "results : %v\n", answers)
		if !reflect.DeepEqual(s.output, answers) {
			t.Error("Not the correct longest palindromes were found : ", answers)
		}
	}
}

// func TestFindingLongestPalindromesInBigString(t *testing.T) {
// 	input := "AACCGCGATTCCACGACCGGTGCACGATTTAATTACGCCGACGTGACGACATTCCTGCTAATGCCTCACCCGCCGGACCGCCCTCGTGATGGGGTAGCTGGGCATGACCTTGTGACATATAACGAGAGTCTACTTGTTTAATCATCTCACGGCGAAAGTCGGGGGGACAGCAGCCGCTGCAGACATTATACCGCAACTACACTAAGCTGAGATAACTCCGTAGTTGACTACGCATCCCTCTAGGCCTTACTTAACCGGATACAGTGACTTTGACAGGTTTGTGGGCTACAGCAATCACTTGCATAGCTGCGTATGGAGGAAGCAACTCTTGAGTGTTAATATGTTGACCCCTGTATTAGGGATGCGGGTAGTAGATGTGGGCAGAGACACCCAGGTCAAGTACATAACCCTCTCGTAGGAGGTGTTCCAGATCACCATACCACCATATCATTCGAGCATGACACTATGTACGCTGTCCCCATTCTGGTAGTCATCATCCCTATCACGGTTTCGAGTGACTGGTGACGGATATCCCCCACGAATGAAAATCTTATTCACAGTCGGTCATATTGGGGTGCTCCTTGGCTTTTCCGCTTGGCTCGGTCTGTTAGGCCTCCGTGCCCCGAGTTTCGGCGCTGTGCTGCCGAGAGTCGGCCATTGTCATTGGGGCCTCACTTGTGGATACCCCGACCTATTTTGACGGGACCACTCGCGGTAGTCGTTGGGCTTATGCACCGTAAAGTCCTCCGCCGGCCTCCCCCCTACAAAAGATGATAAGCTCCGGCAAGCAATATTGAACAACGCAAGGATCGGCGATATAAACAGAGAAACGGCTGATTACTCTTGTTGGTGTGGTATCGCTAAACTGCGTCGCGGAGCCTTATGGCATAGTCGTCCGCGGAGCACTCTGGTAACGCTTATGGTCCATAGCACATTCATCGCATCCGGGCATGCGCTCTATTTGACGATCCCTTGGCGCAGAGATGCTGGCCACGAGCTAAATTAAAGC"
// 	answers := findLongestPalindromes(input)
// 	fmt.Fprintf(os.Stderr, "original string : %s\n", input)
// 	fmt.Fprintf(os.Stderr, "results : %v\n", answers)

// 	input = "3141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420198938095257"
// 	answers = findLongestPalindromes(input)
// 	fmt.Fprintf(os.Stderr, "original string : %s\n", input)
// 	fmt.Fprintf(os.Stderr, "results : %v\n", answers) // 1736371

// 	//"luTaL29Jl9fHLgKGMC50815n5RUb2akIXCCdO15QrmaInCV6gbeKqFVxVQp3s1paZUu9ERvViADltqSXPxeWvMznsm7V6D5I8we30uuwnvFQRy1aVyHFnVNizeCndxzjEeARu5MvKsXX8Au1jDkbfpGlxl00kTLG3uVwe6R2HenVDw5TQnZnO7rI2hmGKuhtY2FU8vXg4bV6wOmRn3Gb2awhJoacFmFUTdic1KeEdQjTWtAV2l3mOWyFk58TIowQzTTB1iAba6tmj01L41zBF6kooj4RBSVvjWmodzgmlyAnQQEn0MHBhcnWi0IUCnj83WWHTnCDzLcmoaEwusg4FNiDh9ueTRSsskLWnDkcKDcNf391mLQg3GU9kjosKNkTj3dfgLpfxvruUx9Dc60bodPpWAFg5ZLd1FrAeBDVK10OfKT5JIUuMoOV4jPGq4KXMZRU0i2JFiJZsWudLOmzziF8QKjZtr2EErjkWPp4H7FMaiy9ZzYsGCpNTp7MdoWnjsi4mrlJxM4uGayOc8ZpQf733rjrtgRGksJJaFYmPNLeoMMiAsjTZVZIYLv5Ymo3cisQAsVSpyWbiCY5oPcbBa0Con3zFmsHeMfjB9yKwHVzmyIQOpUYv8r0KFj61X95i6TGxsWKYfJ7FK0NLvH8ig1ymgsvSLDEmT7A5TXQztyZwvCoW0mYciQdBpDzejCDfPrHtUmIaYcIxKfurQWnsOl4bwYxoRbHeby9PPonTh7J8OYJuTUObuqel6cmKuDl2GWwvbFx4fuAsTYdVf9FaBzLFAuLg0gu9qquyBc3JnEJTQA7fVLobtvcAFHuE1vYoWQyx9CmYsyei7wIBCSaREYieLj9friOUNkQuv2t1LYnoFtWWpYSG1vsgW2QNnEMP8Q5kRBPvxyNz8hcu1ualuLinvFSCYXAaCmd9TRH3buosVIvvQLG9meuPHlijN5tF8i5ed2meUCpZ2WWlzOHEf2J9D3jLIR86jnENnO08zd34aFP5"
// 	input = "luTaL29Jl9fHLgKGMC50815n5RUb2akIXCCdO15QrmaInCV6gbeKqFVxVQp3s1paZUu9ERvViADltqSXPxeWvMznsm7V6D5I8we30uuwnvFQRy1aVyHFnVNizeCndxzjEeARu5MvKsXX8Au1jDkbfpGlxl00kTLG3uVwe6R2HenVDw5TQnZnO7rI2hmGKuhtY2FU8vXg4bV6wOmRn3Gb2awhJoacFmFUTdic1KeEdQjTWtAV2l3mOWyFk58TIowQzTTB1iAba6tmj01L41zBF6kooj4RBSVvjWmodzgmlyAnQQEn0MHBhcnWi0IUCnj83WWHTnCDzLcmoaEwusg4FNiDh9ueTRSsskLWnDkcKDcNf391mLQg3GU9kjosKNkTj3dfgLpfxvruUx9Dc60bodPpWAFg5ZLd1FrAeBDVK10OfKT5JIUuMoOV4jPGq4KXMZRU0i2JFiJZsWudLOmzziF8QKjZtr2EErjkWPp4H7FMaiy9ZzYsGCpNTp7MdoWnjsi4mrlJxM4uGayOc8ZpQf733rjrtgRGksJJaFYmPNLeoMMiAsjTZVZIYLv5Ymo3cisQAsVSpyWbiCY5oPcbBa0Con3zFmsHeMfjB9yKwHVzmyIQOpUYv8r0KFj61X95i6TGxsWKYfJ7FK0NLvH8ig1ymgsvSLDEmT7A5TXQztyZwvCoW0mYciQdBpDzejCDfPrHtUmIaYcIxKfurQWnsOl4bwYxoRbHeby9PPonTh7J8OYJuTUObuqel6cmKuDl2GWwvbFx4fuAsTYdVf9FaBzLFAuLg0gu9qquyBc3JnEJTQA7fVLobtvcAFHuE1vYoWQyx9CmYsyei7wIBCSaREYieLj9friOUNkQuv2t1LYnoFtWWpYSG1vsgW2QNnEMP8Q5kRBPvxyNz8hcu1ualuLinvFSCYXAaCmd9TRH3buosVIvvQLG9meuPHlijN5tF8i5ed2meUCpZ2WWlzOHEf2J9D3jLIR86jnENnO08zd34aFP5"
// 	answers = findLongestPalindromes(input)
// 	fmt.Fprintf(os.Stderr, "original string : %s\n", input)
// 	fmt.Fprintf(os.Stderr, "results : %v\n", answers) // "5n5", "VxV", "lxl", "nZn", "FmF", "rjr", "ZVZ", "g0g", "u1u"

// 	//"GHKSLYLSUQJJBSUQCCVQZUKMFAYMDRBVLNMYLRQLESJEVHGVOREMMVEIAWEHVAVSWXIHPLLCWUZQWLHMJSODJYYUKHUMRSMZVWGUOIYHSEJLXXWEQODJEBSSXIEJEXCGJWDANUYROALIHQTWXNABLAAKWAUWLIABOYOMYEMVUYRCBHYXPKSZHZGNYZVVGPVFSPZAVQXPGWYVISDZWECEQQKXQQKRYLSZJEOPKXPLXJVOPFPUNVATJSWFYJKBRQEVLVVFZCMQSRKJZLPPBRCXPOFCCBXAAWKPIXIMAFJBVHOXZFIWORYBXDOHYQKBFBIBURYLCAETHSQMFSIGDSPOGZVYCOQIVDPXEXBMPRXIKVZTZRRAVRUETVIKXLYKLIBETDUHKXAQJAHLSKRHDUFCUSEJBXFOCXBOEXPISYDHGCAOOVETDKIICMKDBAFNRAPJKTKDXLZEZWQMKCLNSANZXSEWFRGCKJRHZYRLVSYIRMORXPVKVBIQPARWMYXXMXNQLLVHADSZJTLCBPQQXIKDUVDBRKYMRKNJJCSBBXSBPGKSDAEDZSMDZJIMNAGLUVPQEWEAXIQTMMEOGHPPYXQDRCQKQKXPMHHCZEFRQQNMOOWKSHMPXGOCNHETUHLSFPGCRBHZXJXCMYJADJSKGPCJGOSLAJVNJNPKZMGDEAEMKBQNNZJCTUHLKOKMDIBTPNIGQZXNXPEXDTVQFHECEBRWUCKJFOCGVPQOMTPFGFQMNEVRGWKELTZMILZTXVWOEYVZWERDFBIFQTMJNIBNQDZHHENIWOJCRGMZWVIFXFFOWZZZLRIUAGOUMSGSJLALYPEHBXQENGWJIFORKVNFXMONJRBWGDEHALHAKHCVREXDUEUMSDFSNAJYAMUPYMPNFVNKHVQTLXOUMJHWIFQFCRYAFCVCCGAWHTOYWXYTJAROWJEZBYQCRESYDFFKSDTBPJOTZWZQPHWELIFUTJGNLEBESVBAXLQBKIDVRYZWCTTSJZYQUBYTY"
// 	input = "GHKSLYLSUQJJBSUQCCVQZUKMFAYMDRBVLNMYLRQLESJEVHGVOREMMVEIAWEHVAVSWXIHPLLCWUZQWLHMJSODJYYUKHUMRSMZVWGUOIYHSEJLXXWEQODJEBSSXIEJEXCGJWDANUYROALIHQTWXNABLAAKWAUWLIABOYOMYEMVUYRCBHYXPKSZHZGNYZVVGPVFSPZAVQXPGWYVISDZWECEQQKXQQKRYLSZJEOPKXPLXJVOPFPUNVATJSWFYJKBRQEVLVVFZCMQSRKJZLPPBRCXPOFCCBXAAWKPIXIMAFJBVHOXZFIWORYBXDOHYQKBFBIBURYLCAETHSQMFSIGDSPOGZVYCOQIVDPXEXBMPRXIKVZTZRRAVRUETVIKXLYKLIBETDUHKXAQJAHLSKRHDUFCUSEJBXFOCXBOEXPISYDHGCAOOVETDKIICMKDBAFNRAPJKTKDXLZEZWQMKCLNSANZXSEWFRGCKJRHZYRLVSYIRMORXPVKVBIQPARWMYXXMXNQLLVHADSZJTLCBPQQXIKDUVDBRKYMRKNJJCSBBXSBPGKSDAEDZSMDZJIMNAGLUVPQEWEAXIQTMMEOGHPPYXQDRCQKQKXPMHHCZEFRQQNMOOWKSHMPXGOCNHETUHLSFPGCRBHZXJXCMYJADJSKGPCJGOSLAJVNJNPKZMGDEAEMKBQNNZJCTUHLKOKMDIBTPNIGQZXNXPEXDTVQFHECEBRWUCKJFOCGVPQOMTPFGFQMNEVRGWKELTZMILZTXVWOEYVZWERDFBIFQTMJNIBNQDZHHENIWOJCRGMZWVIFXFFOWZZZLRIUAGOUMSGSJLALYPEHBXQENGWJIFORKVNFXMONJRBWGDEHALHAKHCVREXDUEUMSDFSNAJYAMUPYMPNFVNKHVQTLXOUMJHWIFQFCRYAFCVCCGAWHTOYWXYTJAROWJEZBYQCRESYDFFKSDTBPJOTZWZQPHWELIFUTJGNLEBESVBAXLQBKIDVRYZWCTTSJZYQUBYTY"
// 	answers = findLongestPalindromes(input)
// 	fmt.Fprintf(os.Stderr, "original string : %s\n", input)
// 	fmt.Fprintf(os.Stderr, "results : %v\n", answers) // "SLYLS"
// }
